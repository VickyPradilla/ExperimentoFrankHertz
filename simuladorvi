<div class="graph-section">
    <div class="graph-title">Franck-Hertz Data for Mercury</div>
    <canvas id="graph" width="360" height="280"></canvas>
    <input type="range" id="voltageRange" min="0" max="20" step="0.1" value="0" style="width: 360px; margin-top: 10px;" oninput="handleSliderChange(this.value)">
</div>

<script>
const canvas = document.getElementById('graph');
const ctx = canvas.getContext('2d');
let voltage = 0;
let graphData = [];
let isAutoSweep = false;
let autoSweepInterval;

function calculateCurrent(voltage) {
    const stoppingPotential = 1.5;
    if (voltage <= stoppingPotential) return 0;

    const effectiveVoltage = voltage - stoppingPotential;
    let current = effectiveVoltage * 25;

    for (let n = 1; n <= 4; n++) {
        const center = n * 4.9;
        const distance = effectiveVoltage - center;
        const drop = Math.exp(-Math.pow(distance * 2, 2));
        current *= 0.2 + 0.8 * (1 - drop);
    }

    const fractional = (effectiveVoltage % 4.9) / 4.9;
    current *= 0.3 + 0.7 * fractional;
    current += (Math.random() - 0.5) * 5;

    return Math.max(0, current);
}

function drawGraph() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.fillStyle = '#f5e6d3';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(50, canvas.height - 40);
    ctx.lineTo(canvas.width - 20, canvas.height - 40);
    ctx.moveTo(50, 20);
    ctx.lineTo(50, canvas.height - 40);
    ctx.stroke();

    ctx.fillStyle = '#000';
    ctx.font = 'bold 12px Arial';
    ctx.fillText('Voltaje (V)', canvas.width - 110, canvas.height - 10);
    ctx.save();
    ctx.translate(15, canvas.height / 2);
    ctx.rotate(-Math.PI / 2);
    ctx.fillText('Corriente (mA)', -60, 0);
    ctx.restore();

    if (graphData.length > 1) {
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 2;
        ctx.beginPath();
        for (let i = 0; i < graphData.length; i++) {
            const x = 50 + (graphData[i].voltage / 20) * (canvas.width - 70);
            const y = canvas.height - 40 - (graphData[i].current / 400) * (canvas.height - 60);
            i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
        }
        ctx.stroke();
    }
}

function updateGraphPoint(voltage) {
    const current = calculateCurrent(voltage);
    graphData.push({ voltage, current });
    if (graphData.length > 300) graphData.shift();
    drawGraph();
}

function startAutoSweep() {
    stopAutoSweep();
    isAutoSweep = true;
    voltage = 0;
    graphData = [];
    autoSweepInterval = setInterval(() => {
        if (voltage > 15) {
            stopAutoSweep();
            return;
        }
        updateGraphPoint(voltage);
        voltage += 0.1;
        document.getElementById('voltageRange').value = voltage.toFixed(1);
    }, 100);
}

function stopAutoSweep() {
    isAutoSweep = false;
    clearInterval(autoSweepInterval);
}

function resetGraph() {
    stopAutoSweep();
    voltage = 0;
    graphData = [];
    document.getElementById('voltageRange').value = 0;
    drawGraph();
}

function manualVoltageChange(newVoltage) {
    if (isAutoSweep) return;
    voltage = newVoltage;
    graphData = [{ voltage, current: calculateCurrent(voltage) }];
    drawGraph();
}

function handleSliderChange(value) {
    manualVoltageChange(parseFloat(value));
}

function startSimulation() {
    startAutoSweep();
    document.getElementById('startBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
}

function stopSimulation() {
    stopAutoSweep();
    document.getElementById('startBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
}

function resetSimulation() {
    resetGraph();
    document.getElementById('startBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
}

function toggleAutoSweep() {
    if (isAutoSweep) {
        stopSimulation();
    } else {
        startSimulation();
    }
}

window.onload = () => {
    drawGraph();
};
</script>

